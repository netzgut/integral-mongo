buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'nebula.provided-base' version '3.1.0'
    id 'com.github.hierynomus.license' version '0.14.0'
}

group 'net.netzgut.integral'
version '0.0.3-SNAPSHOT'
description 'A MongoDB Driver helper'

project.ext.inceptionYear = '2016'
project.ext.github = 'integral-mongo'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

project.ext.versions = [
    // compile
    slf4j: '1.7.25',
    tapestry: '5.4.3',
    mongodb: '3.4.2',
    fastClasspathScanner: '2.0.21',
    //provided
    jackson: '2.8.7',
    gson: '2.8.0'
]

dependencies {

    compile "org.slf4j:slf4j-log4j12:${versions.slf4j}"
    compile "org.apache.tapestry:tapestry-ioc:${versions.tapestry}"
    compile "org.mongodb:mongo-java-driver:${versions.mongodb}"

    compile "io.github.lukehutch:fast-classpath-scanner:${versions.fastClasspathScanner}"

    provided "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    provided "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
    provided "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jackson}"
    provided "com.google.code.gson:gson:${versions.gson}"
}

task wrapper(type: Wrapper) { gradleVersion = '3.5' }

task pom {
    doLast {
        pom {
            packaging = 'jar'
            project {
                inceptionYear inceptionYear
                name rootProject.name
                description project.description
                url "https://github.com/netzgut/$github"
                properties { 'project.build.sourceEncoding' 'UTF-8' }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url "https://github.com/netzgut/$github"
                    connection "scm:git:git://github.com/netzgut/${github}.git"
                    developerConnection "scm:git:git@github.com:netzgut/${github}.git"
                }
            }
        }.withXml { xmlProvider ->
            def plugins = xmlProvider.asNode().appendNode('build').appendNode('plugins')
            def mavenCompilerPlugin = plugins.appendNode('plugin')
            mavenCompilerPlugin.appendNode('artifactId').value = 'maven-compiler-plugin'
            mavenCompilerPlugin.appendNode('version').value = '3.1'
            def mavenCompilerPluginConfiguration = mavenCompilerPlugin.appendNode('configuration')
            mavenCompilerPluginConfiguration.appendNode('source').value = sourceCompatibility
            mavenCompilerPluginConfiguration.appendNode('target').value = targetCompatibility
        }.writeTo('pom.xml')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives sourcesJar }

uploadArchives {
    // We need to set the variables if not present
    ext.snapshot_repository = project.hasProperty('snapshot-repository') ? project.property('snapshot-repository') : ''
    ext.snapshot_repository_username = project.hasProperty('snapshot-repository-username') ? project.property('snapshot-repository-username') : ''
    ext.snapshot_repository_password = project.hasProperty('snapshot-repository-password') ? project.property('snapshot-repository-password') : ''

    repositories {
        mavenDeployer {
            snapshotRepository(url: snapshot_repository) {
                authentication(userName: snapshot_repository_username, password: snapshot_repository_password)
            }
        }
    }
}

license {
    header rootProject.file('src/main/resources/META-INF/LICENSE.txt')
    strictCheck true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}
